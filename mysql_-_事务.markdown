Title: Mysql - 事务
Tags: Mysql
Notebook: Mysql

[TOC]

# Mysql 事务
## ACID
1. 原子性 （Atomicity）

  一个事务必须被视为一个不可分割的最小工作单元，整个事务中的所有操作要么全做要么全部失败回滚

2. 一致性 （Consistency）

  数据库总是从一个一致性的状态转换到另一个一致性的状态

3. 隔离性 （Isolation）

  一个事务所做的修改在最总提交以前，对其他事务是不可见的。

4. 持久性 （durability）

  一旦事务提交，其所做的修改就会永久保存到数据库中。

## 隔离级别
  SQL中定义了4种隔离级别，每一种级别都规定了一个事务中所做的修改，哪些在事务内和事务间是可见的，哪些是不可见的。
  
1. Read Uncommitted (未提交读) 

  在这个级别中，十五中的修改，几十没有提交，对其他事务也都是可见的额。这个会导致脏读。除非真的有非常必要的理由，在实际中一般很少使用

2. Read Commiteed (提交读)

  大多数数据库系统的默认隔离级别（Mysql 不是），一个事务开始时，只能看到已经提交的事务所做的修改。也就是：一个事务从开始知道提交之前，所做的任何修改对其他事务都是不可见的。但是这个级别会导致不可重复读。就是两次执行同样的查询，可能会得到不一样的结果。例如：一个事务A 开始，第一个查询一行数据，但是这个时候另一个事务B修改这一行数据并且commit，这个时候事务A再去查询这一行数据时就发现和第一次的不一样

3. Repeatable Read (可重复读)

  这个级别解决了脏读和不可重复读。保证同一个事务中多次读取同样的记录的结果是一致的。当一个事务修改一行数据时，就保证其他事务不能同时修改这一行数据。但是这个级别还是会导致幻读。就是事务A开始执行，查询总共有n行数据满足某个条件，这个时候事务B开始插入或删除某一条满足这个条件的行，并且commit，这个时候事务A在做查询是，就发现结果是n-1或n+1

4. Serializable (可串行化)

  这个级别是最高的隔离级别。他通过强制事务串行化，避免前面的幻读的问题。

## 事务日志
  事务日志可以帮助提高事务的效率。使用事务日记，存储引擎只是修改内存的拷贝，再把修改日志持久化到硬盘。所以没必要每次修改数据时都同步到磁盘，同时事务日志采用的追加的方式，因此写日志操作很高效。如果数据修改已经记录到了事务日记并持久化，但是数据没有回写磁盘，如果系统崩溃，可以通过事务日志恢复数据。这个就是Write-Ahead Logging.

## 在事务中混合使用存储引擎
  Mysql 服务器层不会管理事务，事务都是在下层的存储引擎实现的。所以在同一个事务中，使用多种存储引擎是不可靠的。如果事务中混合使用了事务型和非事务型的表，正常提交没有问题，但是如果事务需要回滚时，非事务型的表上的变更就无法撤销，这个导致事务的最终结果将无法确定。

## 隐式和显式锁定
  InnoDB采用的是两阶段锁定协议。在事务执行过程中，随时都可以执行锁定，锁只有在commit或者rollback的时候才会释放，并且所有的锁是同一时刻被释放 -- 这个是隐式锁定。InnoDB会根据隔离级别在需要的时候自动加锁。
  另外InnoDB也支持通过特定的语句进行显示锁定。
  如：
    1. SELECT ... LOCK IN SHARE MODE
    2. SELECT ... FOR UPDATE
  Mysql 也支持LOCK TABLE 和 UNLOCK TABLE语句，但是这个是在服务器层实现的，和存储引擎无关。

## 多版本控制器 (MVCC)
  1. Mysql的大多数事务型存储引擎实现的都不是简单的行级锁，一般实现了多版本并发控制
  2. 可以认为MVCC是行级锁的变种，但是它大多数情况下避免了加锁操作，大都实现了非阻塞的读操作，写操作也只锁定必要的行
  3. MVCC的实现，是通过保存数据的某个时间点的快照来实现的。根据实物开始的时间不同，每个事务对同一张表，同一时刻看到的数据可能是不一样的。
  4. InnoDB的MVCC，是通过在每行记录后面保存了两个隐藏的列来实现的。一个是创建版本一个是过期版本(删除版本)，这个版本是系统版本号。每开始一个新的事务，系统版本号就会自动增加。事务开始时刻的版本号就会作为事务的版本号。下面是MVCC在Mysql的具体操作
    1. SELECT
    
      InnoDB只查找创建版本不大于当前版本的行或者行的删除版本要么没定义要么大于当前版本。
    2. INSERT

      InnoDB为新插入的每一行保存当前系统版本号作为版本号
    3. DELETE

      InnoDB为删除的每一行保存当前系统版本号作为行删除版本号
    4. UPDATE

  MVCC只在Repeatable Read 和 Read Committed这两个隔离级别下工作。
      
