Title: Java 内存区域
Tags: Java, GC
Notebook: Java

[TOC]

# 数据区域

## 程序计数器
1. 是一块很小的内存空间，它可以看做是当前线程所执行的字节码的行号指示器。
2. 如果线程执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址，如果是Native方法，那这个计数器的值为空。
3. 此区域是唯一一个在java虚拟机规范中没有规定任何OOM（OutOfMemory)情况的区域

## Java虚拟机栈
1. 和程序计数器一样，也是线程私有的，生命周期和线程相同
2. 描述的Java方法执行的内存模型： 每个方法在执行的同时都会创建一个栈帧，用于存储局部变量表，操作数栈，动态链接，方法出口等信息。
3. 每一个方法从调用知道执行完成的过程，就对应一个栈帧在虚拟机中入栈到出栈的过程
4. 这个区域规定了2中异常：
   1. 如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError
   2. 如果虚拟机栈是可以动态扩展的，如果扩展时无法申请到足够的内存，就抛出OOM

## 本地方法栈
1. 和虚拟机栈作用非常相似，只不过虚拟机栈是为Java方法服务的，本地方法栈是为Native方法服务的
2. 很多虚拟机都把本地方法栈和虚拟机栈合二为一，像Hot Spot
3. 和虚拟机栈一样，会跑StackOverflowError和OOM

## Java堆
1. 对大多数应用，Java堆是java虚拟机所管理的内存中最大的一块。这个区域的唯一目的是存放对象的实例。几乎所有的对象的实例都在这里分配内存；
2. Java堆是所有线程共享的内存区域；
3. Java堆是垃圾回收器管理的主要区域，可以为分为新生代和老生代；
4. Java堆可以处于物理上不连续的空间，只要逻辑上连续即可。

## 方法区
1. 也是线程共享的内存区域；
2. 用来存储一杯虚拟机加载的类信息，常量，运行时常量池，静态变量，即时编译器编译后的代码等数据；
3. 又称Non-heap , 永久代

## 直接内存
1. 并不是虚拟机运行时数据的一部分，但是有可能导致OOM
2. 直接内存的分配不受Java堆大小的限制
